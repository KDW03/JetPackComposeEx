setContent 내에서 사용되는 앱 테마는 프로젝트 이름에 맞게 지정된다
ex) 프로젝트 이름 : JetPackComposeEx ->  테마 : JetPackComposeExTheme

컴포저블 함수
컴포저블 함수는 @Composable 이라는 주석이 다른 일반 함수
컴포저블 함수 내에서 컴포저블 함수 호출 가능

setContent를 사용하여 레이아웃 정의

Theme는 컴포저블 함수의 스타일을 지정하는 방법

동일한 파일에 미리보기를 여러 개 만들고 이름 지정 가능


androidx.compose.material3.Surface와 같은 Material 구성요소는 앱에 넣고자 하는 공통 기능(예: 텍스트에 적절한 색상 선택)을 처리하여 더 나은 환경을 만들도록 빌드

Surface 및 Text와 같은 대부분의 Compose UI 요소는 modifier 매개변수를 선택적으로 허용


함수는 기본적으로 빈 modifier가 할당되는 modifier 매개변수를 포함하는 것이 좋다.

Compose의 세 가지 기본 표준 레이아웃 요소는 Column,Row,Box 이다
이러한 요소는 컴포저블 콘텐츠를 사용하는 구성 가능한 함수이므로 내부 항목을 배치 가능

for 루프를 사용하여 Column에 요소를 추가가능

Button은 material3 패키지에서 제공하는 컴포저블로, 컴포저블을 마지막 인수로 사용
후행 람다는 괄호 밖으로 이동할 수 있으므로 모든 콘텐츠를 버튼에 하위 요소로 추가

alignEnd 수정자가 없으므로 시작 시 컴포저블에 약간의 weight을 제공합니다. weight 수정자는 요소를 유연하게 만들기 위해 가중치가 없는 다른 요소를 효과적으로 밀어 내는 요소
사용 가능한 모든 공간을 채움

버튼을 클릭할 수 있게 만드는 방법과 항목의 크기를 조절하는 방법을 알아보기 전에 각 항목이 펼쳐진 상태인지를 가리키는 값을 어딘가에 저장해야 합니다. 이 값을 항목의 상태라고 한다

Compose 앱은 구성 가능한 함수를 호출하여 데이터를 UI로 변환
데이터가 변경되면 Compose는 새 데이터로 이러한 함수를 다시 실행하여 업데이트된 UI를 만듬 = 리컴포지션

Compose는 데이터가 변경된 구성요소만 다시 구성하고 영향을 받지 않는 구성요소는 다시 구성하지 않고 건너뛰도록 개별 컴포저블에서 필요한 데이터를 확인
구성 가능한 함수는 자주 실행될 수 있고 순서와 관계없이 실행될 수 있으므로 코드가 실행되는 순서 또는 이 함수가 다시 구성되는 횟수에 의존해서는 안된다.

컴포저블 함수 안에 설정 된 변수를 State 또는 MutableState 로 설정하지 않으면 Compose에서 추적하지 않고 또한 호출 될 때 마다 재 설정됌
컴포저블에 내부 상태를 추가하려면 mutableStateOf 함수를 사용

State 및 MutableState는 어떤 값을 보유하고 그 값이 변경될 때마다 UI 업데이트(리컴포지션)를 트리거하는 인터페이스
컴포저블 내의 변수에 mutableStateOf를 할당하기만 할 수는 없다.
여러 리컴포지션 간에 상태를 유지하려면 remember를 사용하여 mutableState의 상태를 기억해야 한다.

remember는 리컴포지션을 방지하는 데 사용되므로 상태가 재설정x => 최초 호출시 한번 메모리에 올라감
내부 상태는 클래스의 비공개 변수로 보면 된다.

구성 가능한 함수는 상태를 자동으로 '구독'합니다. 상태가 변경되면 이러한 필드를 읽는 컴포저블이 재구성되어 업데이트를 표시


컴포저블 함수에서 여러 함수가 읽거나 수정하는 상태는 공통의 상위 항목에 위치시켜야한다
이 프로세스를 상태 호이스팅

호이스팅이란 들어 올린다 또는 끌어올린다라는 의미

상태를 호이스팅할 수 있게 만들면 상태가 중복되지 않고 버그가 발생하는 것을 방지할 수 있으며 컴포저블을 재사용할 수 있고 훨씬 쉽게 테스트

State 변수 를 선언할 때 = 대신 by 키워드를 사용하여 속성 위임을 할 수 있다.
이로 인해 .value를 입력할 필요가 없다

OnboardingScreen에서 만든 상태를 MyApp 컴포저블과 공유해야 한다
상태 값을 사우이 요소와 공유하는 대신
상태를 호이스팅 = 상태 값에 엑세스해야 하는 공통 상위 요소로 상태 값을 이동하기만 하면 된다.

이벤트는 어떻게 전달할까요? 아래로 콜백을 전달
콜백은 다른 함수에 인수로 전달되는 함수로 이벤트가 발생하면 실행

이 방법은 콜백을 전달 함으로써 컴포저블의 재사용 가능성을 높이고 다른 컴포저블이 상태를 변경하지 않도록 보호

스크롤이 가능한 열을 표시하기 위해 LazyColumn을 사용합니다. LazyColumn은 화면에 보이는 항목만 렌더링하므로 항목이 많은 목록을 렌더링할 때 성능이 향상
LazyColumn과 LazyRow는 Android 뷰의 RecyclerView와 동일

remember 함수는 컴포저블이 컴포지션에 유지되는 동안에만 작동
기기를 회전하면 전체 활동이 다시 시작되므로 모든 상태가 손실

remember를 사용하는 대신 rememberSaveable을 사용하면 됩니다. 이 함수는 구성 변경(예: 회전)과 프로세스 중단에도 각 상태를 저장


animateDpAsState 컴포저블 = 이 컴포저블은 애니메이션이 완료될 때까지 애니메이션에 의해 객체의 value가 계속 업데이트되는 상태 객체를 반환

애니메이션을 맞춤설정할 수 있는 animationSpec 매개변수를 선택적으로 사용

MaterialTheme은 Material 디자인 사양의 스타일 지정 원칙을 반영한 구성 가능한 함수
스타일 지정 정보는 content의 내부에 있는 구성요소로 하향 적용

모든 하위 컴포저블에서 MaterialTheme의 세 가지 속성, colorScheme, typography, shapes를 가져올 수 있다

 DefaultPreview에 UI_MODE_NIGHT_YES와 함께 @Preview 주석을 추가해서 DrakMode를 미리보기 가능

