앱의 '상태'는 시간이 지남에 따라 변할 수 있는 값

android 앱 상태의 몇 가지 예시로
- 채팅 앱에서 가장 최근에 수신된 메시지
- 사용자의 프로필 사진
- 항목 목록의 스크롤 위치

상태에 따라 특정 시점에 UI에 표시되는 항목이 결정된다.

상태가 수정되도록 하는 작업을 '이벤트'

이벤트는 애플리케이션 외부 또는 내부에서 생성되는 입력

ex)
버튼 누르기 등으로 UI와 상호작용하는 사용자
기타 요인(예: 새 값을 전송하는 센서 또는 네트워크 응답)

상태는 존재하고 이벤트는 발생

UI 업데이트 루프
- 이벤트 : 이벤트는 사용자 도는 프로그램의 다른 부분에 의해 생성
- 상태 업데이트 : 이벤트 핸들러가 UI에서 사용하는 상태를 변경
- 상태 표시 : 새로운 상태를 표시하도록 UI가 업데이트

상태가 변경되면 Compose는 영향을 받는 구성 가능한 함수를 새 상태로 다시 실행
그러면 리컴포지션이라는 업데이트된 UI 가 만들어짐

Compose는 데이터가 변경된 구성요소만 재구성하고 영향을 받지 않는 구성요소는 건너뛰도록 개별 컴포저블에 필요한 데이터를 확인

컴포지션 : 컴포저블을 실행할 때 Jetpack Compose에서 빌드한 UI에 관한 설명
초기 컴포지션 : 처음 컴포저블을 실행하여 컴포지션을 만듬
리컴포지션: 데이터가 변경될 때 컴포지션을 업데이트하기 위해 컴포저블을 다시 실행하는 것을 말함

Compose에는 특정 상태를 읽는 컴포저블의 리컴포지션을 예약하는 특별한 상태 추적 시스템
이를 통해 Compose
Compose의 State 및 MutableState 유형을 사용하여 Compose에서 상태를 관찰가 세분화되어 전체 UI가 아닌 변경해야 하는 이러한 구성 가능한 함수만 재구성

Compose는 상태 value 속성을 읽는 각 컴포저블을 추적하고 그 value가 변경되면 리컴포지션을 트리거

mutableStateOf 함수를 사용하여 관찰 가능한 MutableState
이 함수는 초깃값을 State 객체에 래핑된 매개변수로 수신한 다음, value의 값을 관찰 가능한 상태


remember로 계산된 값은 초기 컴포지션 중에 컴포지션에 저장되고 저장된 값은 리컴포지션 간에 유지


by 키워드를 사용하여 State 객체를 var로 정의 가능
value 속성을 명시적으로 참조하지 않고도 간접적으로 읽고 변경

Compose는 선언형 UI 프레임워크
상태가 변경될 때 UI 구성요소를 삭제

호출되지 않는 구성 가능한 함수(예: 함수가 if 문 내에서 호출되는데 조건이 충족되지 않기 때문)는 컴포지션에 없습니다


사용자에게 표시되는 항목이 UI라면 UI 상태는 앱에서 사용자에게 표시해야 한다고 지정하는 항목입니다. 동전의 양면과 마찬가지로 UI는 UI 상태를 시각적으로 나타냅니다. UI 상태가 변경되면 변경사항이 즉시 UI에 반영
remember는 컴포지션에 객체를 저장
remember가 호출되는 소스 위치가 리컴포지션 중에 다시 호출되지 않으면 객체를 삭제

remember를 사용하면 리컴포지션 간에 상태를 유지하는 데 도움이 되지만 구성 변경 간에는 유지되지 않는다
remember 대신 rememberSaveable을 사용


rememberSaveable은 Bundle에 저장할 수 있는 모든 값을 자동으로 저장
다른 값의 경우에는 맞춤 Saver 객체를 전달

여러 리컴포지션 간에 상태를 유지하는 것 외에도 rememberSaveable은 활동 및 프로세스 재생성 전반에 걸쳐서도 상태를 유지

remember를 사용하여 객체를 저장하는 컴포저블에는 내부 상태가 포함되어 있어 컴포저블을 스테이트풀(Stateful)로 만든다.
내부 상태를 갖는 컴포저블은 재사용 가능성이 적고 테스트하기가 더 어려운 경향

상태를 보유하지 않는 컴포저블을 스테이트리스(Stateless) 컴포저블
상태 호이스팅을 사용하면 스테이트리스(Stateless) 컴포저블을 쉽게 만들 수 있다

Compose에서 상태 호이스팅은 컴포저블을 스테이트리스(Stateless)로 만들기 위해 상태를 컴포저블의 호출자로 옮기는 패턴
Jetpack Compose에서 상태 호이스팅을 위한 일반적 패턴은 상태 변수를 다음 두 개의 매개변수로 바꾸는 것

- value: T  - 표시할 현재 값
- onValueChange: (T) -> Unit - 값을 변경하도록 요청하는 이벤트. 여기서 T는 제안된 새 값

상태가 내려가고 이벤트가 올라가는 패턴을 단방향 데이터 흐름(UDF)
상태 호이스팅은 이 아키텍처를 Compose에서 구현하는 방법

- 단일 소스 저장소 : 상태를 복제하는 대신 옮겼기 때문에 소스 정자소가 하나만 있다. -> 버그 방지 도움
- 공유 가능함 : 끌어올린 상태를 여러 컴포저블과 공유 가능
- 가로채기 가능 : 스테이리스(Stateless)컴포저블의 호출자는 상태를 변경하기 전에 이벤트를 무시할지 수정할지 결정
- 분리됨 : 구성 가능한 스테이트리스(Stateless) 함수의 상태는 어디에든 저장 가능

구성 가능한 함수에서 모든 상태를 추출할 수 있는 경우 결과로 생서되는 구성 가능한 함수를 스테이트리스라고 한다.

스테이트리스(Stateless) 컴포저블은 상태를 소유하지 않는 컴포저블,즉 새 상태를 보유하거나 정의하거나 수정하지 않습니다.
스테이트풀(Stateful) 컴포저블은 시간이 지남에 따라 변할 수 있는 상태를 소유하는 컴포저블

실제 앱에서는 컴포저블의 기능에 따라 컴포저블을 100% 스테이트리스(Stateless)로 하는 것은 어려울 수 있다
컴포저블이 가능한 한 적게 상태를 소유하고 적절한 경우 컴포저블의 API에 상태를 노출하여 상태를 끌어올릴 수 있도록 컴포저블을 디자인해야한다.


상태를 끌어올릴 때 상태의 이동 위치를 쉽게 파악할 수 있는 세 가지 규칙
- 상태는 적어도 그 상태를 사용하는 모든 컴포저블의 가장 낮은 공통 상위 요소로 끌어올려야 한다.
- 상태는 최소한 변경될 수 있는 가장 높은 수준으로 끌어올려야 한다.
- 두 상태가 동일한 이벤트에 대한 응답으로 변경되는 경우 두 상태는 동일한 수준으로 끌어올려야 한다.

상태 호이스팅에는 몇 가지 이점
1. 스테이트리스 컴포저블을 재사용할 수 있다.
@Composable
fun StatefulCounter() {
    var waterCount by remember { mutableStateOf(0) }
    var juiceCount by remember { mutableStateOf(0) }

    StatelessCounter(waterCount, { waterCount++ } )
    StatelessCounter(juiceCount, { juiceCount++ } )
}

2. 구성 가능한 스테이트풀(Stateful) 함수는 여러 구성 가능한 함수에 동일한 상태를 제공할 수 있다.
@Composable
fun StatefulCounter() {
    var count by remember { mutableStateOf(0) }

    StatelessCounter(count, { count++ })
    AnotherStatelessMethod(count, { count *= 2 })
}

이 경우 개수가 StatelessCount 또는 AnotherStatelessMethod에 의해 업데이트 되면 모든 항목이 재구성
끌어올린 상태는 공유할 수 있으므로 불필요한 리컴포지션을 방지하고 재사용성을 높이려면 컴포저블에 필요한 상태만 전달

컴포저블 디자인 권자사항은 필요한 매개변수만 전달하는 것


rememberScaffoldState는 Jetpack Compose에서 ScaffoldState 객체를 생성하고 저장하는 함수
ScaffoldState 객체는 Scaffold 컴포저블의 상태를 나타내며, 이 객체를 사용하여 Scaffold의 드로어(drawer), 스낵바(snackbar), 백드롭(backdrop) 등의 상태를 제어

ex)
val scaffoldState = rememberScaffoldState()
Scaffold(
    scaffoldState = scaffoldState()
    ) {
        Button(onClick = {
            scope.launch {
                scaffoldState.snackbarHostState.showSnackbar("Snackbar message")
            }
        }) {
            Text("Show Snackbar")
        }
    }


mutableStateOf 함수는 MutableState<T> 유형의 객체를 반환합니다.

mutableStateListOf 및 toMutableStateList 함수는 SnapshotStateList<T> 유형의 객체를 반환합니다. 이 섹션에서 '관찰 가능한 MutableList'는 이 클래스를 나타낸다
rememberSaveable 함수는 기본적으로 컴포저블의 위치를 기준으로 상태를 저장
목록에서 요소가 제거되면 상태가 다른 요소로 이동할 수 있다

이 문제를 해결하려면, rememberSaveable 함수를 호출할 때 key 매개변수에 고유한 값을 전달하여 각 요소의 상태가 고유하게 저장되도록 해야 한다.
items 메서드는 key 매개변수를 수신
기본적으로 각 항목의 상태는 목록에 있는 항목의 위치를 기준으로 키가 지정

변경 가능한 목록에서는 데이터 세트가 변경될 때 문제가 발생합니다. 위치를 변경하는 항목은 기억된 상태를 사실상 잃기 때문

화면 또는 UI 상태는 화면에 표시할 내용을 나타낸다.

상태는 애플리케이션 데이터를 포함하므로 대개 계층 구조의 다른 레이어에 연결

ui 상태는 화면에 표시할 내용을 설명(예: 탐색 로직 또는 스낵바 표시)
앱의 로직은 앱의 동작 방식을 설명하고 상태 변경에 반응(결제하기 또는 사용자 환경설정 저장), 이 로직은 대개 비지니스 레이어나 데이터 영역에 배치되고 UI레이어에는 배치되지 않는다

ViewModel은 UI 상태와 앱의 다른 레이어에 있는 비즈니스 로직에 대한 액세스 권한을 제공
또한 ViewModel은 구성 변경 후에도 유지되므로 컴포지션보다 전체 기간이 더 길다
Compose 콘텐츠 호스트의 수명 주기(즉, 활동이나 프래그먼트, Compose Navigation을 사용하는 경우 탐색 그래프의 대상)를 따른다

ViewModel은 메모리 누수의 문제 때문에 컴포저블에서 만든 상태를 보유해서는 안된다.
UI 상태, 목록을 ViewModel로 이전하고 비즈니스 로직도 ViewModel로 추출

viewModel()은 기존 ViewModel을 반환하거나 지정된 범위에서 새 ViewModel을 생성
ViewModel 인스턴스는 범위가 활성화되어 있는 동안 유지
즉, activity가 종료되거나 프로세스가 종료될 때까지 동일한 인스턴스

ViewModel은 탐색 그래프의 활동이나 프래그먼트, 대상에서 호출되는 루트 컴포저블에 가까운 화면 수준 컴포저블에서 사용하는 것이 좋다
ViewModel은 다른 컴포저블로 전달하면 안 된다. 대신 필요한 데이터오 ㅏ필수 로직을 실행하는 함수만 매개변수로 전달

모든 상태가 ViewModel에서 관리되면 코드가 더 간단해지고 테스트하기 쉬워짐

































